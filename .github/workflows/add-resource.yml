name: Add Resource

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string

jobs:
  process-resource:
    if: |
      (github.event_name == 'issues' && 
       contains(github.event.issue.labels.*.name, 'resource-submission')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue data
        id: get-issue
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Parse issue body
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ steps.get-issue.outputs.issue_number }}";
            
            // Get issue data
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            const body = issue.body;
            console.log("Issue body:", body);
            
            // Parse the GitHub form format
            function parseFormField(body, fieldName) {
              // GitHub forms create sections like:
              // ### Resource Name
              // 
              // Value here
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*([^\\n#]+)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            function parseDropdownField(body, fieldName) {
              // For dropdowns, GitHub creates: ### Category\n\nSelectedValue
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*([^\\n#]+)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            function parseCheckboxField(body, fieldName) {
              // For checkboxes: - [x] Yes, this resource is completely free
              const regex = new RegExp(`- \\[x\\] ([^\\n]+)`, 'i');
              const match = body.match(regex);
              return match ? true : false;
            }
            
            const resourceName = parseFormField(body, 'Resource Name');
            const resourceUrl = parseFormField(body, 'Resource URL');
            const category = parseDropdownField(body, 'Category');
            const subcategory = parseDropdownField(body, 'Subcategory');
            const description = parseFormField(body, 'Description');
            const tags = parseFormField(body, 'Tags');
            const resourceType = parseDropdownField(body, 'Resource Type');
            const isFree = parseCheckboxField(body, '');
            const githubStars = parseFormField(body, 'GitHub Stars');
            const githubUrl = parseFormField(body, 'GitHub URL');
            
            console.log("Parsed data:", {
              resourceName, resourceUrl, category, subcategory, description
            });
            
            // Validate required fields
            if (!resourceName || !resourceUrl || !category || !description) {
              const missingFields = [];
              if (!resourceName) missingFields.push('Resource Name');
              if (!resourceUrl) missingFields.push('Resource URL');
              if (!category) missingFields.push('Category');
              if (!description) missingFields.push('Description');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: `‚ùå **Submission Error**: Missing required fields: ${missingFields.join(', ')}\n\nPlease create a new issue with all required fields filled out.`
              });
              
              core.setFailed(`Missing required fields: ${missingFields.join(', ')}`);
              return;
            }
            
            // Validate URL
            try {
              new URL(resourceUrl);
            } catch (e) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: `‚ùå **Submission Error**: Invalid URL format: ${resourceUrl}\n\nPlease provide a valid URL starting with http:// or https://`
              });
              
              core.setFailed('Invalid URL format');
              return;
            }
            
            // Set outputs
            core.setOutput('resource_name', resourceName);
            core.setOutput('resource_url', resourceUrl);
            core.setOutput('category', category);
            core.setOutput('subcategory', subcategory);
            core.setOutput('description', description);
            core.setOutput('tags', tags);
            core.setOutput('resource_type', resourceType);
            core.setOutput('github_stars', githubStars);
            core.setOutput('github_url', githubUrl);
            
            return "success";

      - name: Update README.md
        id: update-readme
        run: |
          # Create resource entry
          RESOURCE_NAME="${{ steps.parse-issue.outputs.resource_name }}"
          RESOURCE_URL="${{ steps.parse-issue.outputs.resource_url }}"
          DESCRIPTION="${{ steps.parse-issue.outputs.description }}"
          CATEGORY="${{ steps.parse-issue.outputs.category }}"
          GITHUB_STARS="${{ steps.parse-issue.outputs.github_stars }}"
          GITHUB_URL="${{ steps.parse-issue.outputs.github_url }}"
          
          # Format the resource entry
          if [[ -n "$GITHUB_STARS" && -n "$GITHUB_URL" ]]; then
            RESOURCE_ENTRY="- [$RESOURCE_NAME]($RESOURCE_URL) $DESCRIPTION ‚≠ê [$GITHUB_STARS]($GITHUB_URL)"
          elif [[ -n "$GITHUB_URL" ]]; then
            RESOURCE_ENTRY="- [$RESOURCE_NAME]($RESOURCE_URL) $DESCRIPTION ‚≠ê [GitHub]($GITHUB_URL)"
          else
            RESOURCE_ENTRY="- [$RESOURCE_NAME]($RESOURCE_URL) $DESCRIPTION"
          fi
          
          echo "Resource entry: $RESOURCE_ENTRY"
          
          # Check if resource already exists
          if grep -q "\\[$RESOURCE_NAME\\]($RESOURCE_URL)" README.md; then
            echo "duplicate=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Find category section and add resource
          # This is a simple approach - add to the end of the category section
          if grep -q "# $CATEGORY" README.md; then
            # Find the line number of the category
            CATEGORY_LINE=$(grep -n "# $CATEGORY" README.md | head -1 | cut -d: -f1)
            
            # Find the next category or end of file
            NEXT_CATEGORY_LINE=$(tail -n +$((CATEGORY_LINE + 1)) README.md | grep -n "^# " | head -1 | cut -d: -f1)
            
            if [[ -n "$NEXT_CATEGORY_LINE" ]]; then
              INSERT_LINE=$((CATEGORY_LINE + NEXT_CATEGORY_LINE - 1))
            else
              INSERT_LINE=$(wc -l < README.md)
              INSERT_LINE=$((INSERT_LINE + 1))
            fi
            
            # Insert the resource
            {
              head -n $((INSERT_LINE - 1)) README.md
              echo "$RESOURCE_ENTRY"
              tail -n +$INSERT_LINE README.md
            } > README_temp.md
            
            mv README_temp.md README.md
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "category_not_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Handle errors
        if: steps.update-readme.outputs.duplicate == 'true' || steps.update-readme.outputs.category_not_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ steps.get-issue.outputs.issue_number }}";
            let message = "";
            
            if ("${{ steps.update-readme.outputs.duplicate }}" === "true") {
              message = "‚ùå **Duplicate Resource**: This resource already exists in the README.md file.";
            } else if ("${{ steps.update-readme.outputs.category_not_found }}" === "true") {
              message = "‚ùå **Category Not Found**: The category '${{ steps.parse-issue.outputs.category }}' was not found in README.md.";
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: message
            });
            
            core.setFailed("Resource submission failed");

      - name: Create Pull Request
        if: steps.update-readme.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add ${{ steps.parse-issue.outputs.resource_name }} to ${{ steps.parse-issue.outputs.category }}"
          title: "Add ${{ steps.parse-issue.outputs.resource_name }} to ${{ steps.parse-issue.outputs.category }}"
          body: |
            ## üöÄ New Resource Addition
            
            **Resource**: [${{ steps.parse-issue.outputs.resource_name }}](${{ steps.parse-issue.outputs.resource_url }})
            **Category**: ${{ steps.parse-issue.outputs.category }}
            **Type**: ${{ steps.parse-issue.outputs.resource_type }}
            
            ### Description
            ${{ steps.parse-issue.outputs.description }}
            
            ---
            
            Closes #${{ steps.get-issue.outputs.issue_number }}
            
            This PR was automatically created from a resource submission.
          branch: add-resource-${{ steps.get-issue.outputs.issue_number }}
          delete-branch: true
          labels: |
            resource-addition
            automated-pr

      - name: Comment on success
        if: steps.update-readme.outputs.updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt("${{ steps.get-issue.outputs.issue_number }}"),
              body: "‚úÖ **Success!** Your resource submission has been processed and a Pull Request has been created. Thank you for contributing to freeForGeeks! üéâ"
            });
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt("${{ steps.get-issue.outputs.issue_number }}"),
              state: 'closed'
            });